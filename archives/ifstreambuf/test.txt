/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int len1 = inorder.size()-1, len2 = inorder.size()-1;
        return helper(inorder, 0,len1,postorder,0,len2);
    }
    TreeNode* helper(vector<int>& inorder,int il,int ir, vector<int>& postorder,int pl,int pr)
    {
        if(il > ir || pl >pr) return nullptr;
        int val = postorder[pr];
        TreeNode* t = new TreeNode(val);
        int i=il;
        for(;i<=ir; ++i)
            if(inorder[i] == val)
                break;
        t->left = helper(inorder,il,i-1, postorder,pl,pl+i-1-il);
        t->right = helper(inorder,i+1,ir, postorder,pr-ir+i,pr-1);
        return t;
    }
};

===========================================================================================
===========================================================================================
106. Construct Binary Tree from Inorder and Postorder Traversal
Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
